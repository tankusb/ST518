image(volcano)
# Simulate 20 rolls of a fair 6-sided die
set.seed(1066)
k <- 6 # number of sides
n <- 20 # number of trials
# Possible outcomes for each trial
(sides <- 1:k)
# Vector of equal probabilities for each outcome
(p_vec <- rep(1/k, k))
# Use the sample function to simulate n trials
(outcomes <- sample(sides, n, replace = TRUE, prob = p_vec))
# Frequency of each outcome
(counts <- table(outcomes))
install.packages('easypackages', repos ="http://cran.us.r-project.org" )
library('easypackages')
packages('vcdExtra',
'Sleuth3',
'lme4',
'arm',
'glm2',
'magrittr',
'tidyverse'
)
pbinom(0.7,20)
pbinom(c(0,0.25,0.5,0.75,1),0.7,20)
pbinom(c(0,0.25,0.5,0.75,1),20,0.7)
## 3P3:
|#|n1 |n2 |n3|
---------------
|1|0|0|3|
|||||
|||||
|||||
|||||
df <- ex2117
library('Sleuth3')
df <- ex2117
head(df)
str(df)
head(df)
(df)
df
HW1data <- df.copy()
HW1data <- df.copy
HW1data['NumBoys'] <- HW1data['PctBoys'] * HW1data['Number']
HW1data <- df
HW1data['NumBoys'] <- HW1data['PctBoys'] * HW1data['Number']
HW1data
HW1data['NumBoys'] <- int(HW1data['PctBoys'] * HW1data['Number'] / 100)
HW1data['NumBoys'] <- round(HW1data['PctBoys'] * HW1data['Number'] / 100,0)
HW1data
install.packages("gnm")
library(vcdExtra)
library(Sleuth3)
library(tidyverse)
X <- data.frame(
V1 = c('Up', 'Up', 'Down', 'Down', 'Up', 'Up'),
V2 = c('Left', 'Left', 'Right', 'Right', 'Left', 'Right'),
V3 = c('B','B','A','B', 'A', 'B'))
X
X %>% table %>% as.data.frame # don't worry about this code for now
X_tab <- table(X)
(dims <- dim(X_tab))  # Dimensions of the 3-dimensional array that contains the frequencies of the factor-level combinations of the 3 variables in `X`.
# This is why there are 8 rows in the frequency table
prod(dims)
# 2-D slices of 3-D table
X_tab
penalty <- case1902
penalty
str(penalty)
penalty_freq <- gather(data = penalty, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
# penalty_freq <- gather(data = penalty, key = Sentence, value = Freq, gather_cols=c("Death", "NoDeath"), factor_key = TRUE)
# Or more concisely: gather(penalty, Sentence, Freq, Death:NoDeath, factor_key = TRUE)
# factor_key specifies that the new variable Sentence should also be a factor, rather than just a character vector.
penalty[1,]
penalty_freq[c(1,13),]
# the other functions in that table are available in base R, but expand.dft() is from vcdExtra.
penalty_case <- expand.dft(penalty_freq)
head(penalty_case)
penalty_indicators<- transmute(penalty_case,
Aggravation = Aggravation,
White = ifelse(Victim == "White", 1, 0),
Death = ifelse(Sentence == "Death", 1, 0))
# another binary encoding: model.matrix( ~ Sentence + Victim + Aggravation, data = penalty_case)
head(penalty_indicators)
# The following are equivalent:
penalty_tab <- xtabs(~ Sentence + Victim + Aggravation, penalty_case)
# penalty_tab <- xtabs(Freq ~ Sentence + Victim + Aggravation, penalty_freq)
xtabs(~ Sentence + Victim + Aggravation, penalty_case) %>% dim
xtabs(~ Sentence + Aggravation + Victim, penalty_case) %>% dim
aperm(penalty_tab, perm = c(1, 2, 3)) %>% dim
aperm(penalty_tab, perm = c(1, 3, 2)) %>% dim  # the 2nd and 3rd dimensions switched places -- we've turned the array on its end
(penalty_given_sentence <- co_table(penalty_tab,'Sentence'))
penalty_given_sentence$Death
penalty_tab %>% aperm(c(3, 1, 2)) %>% ftable
ftable(Aggravation + Victim ~ Sentence, penalty_case)
structable(Sentence + Aggravation ~ Victim, penalty_case)
penalty_tab %>% aperm(c(2, 1, 3)) %>% structable(direction = c("v", "v", "h"))
xtabs(~ Victim + Sentence, penalty_case) # collapse along Aggravation axis
xtabs(~ Sentence, penalty_case) # collapse along Aggravation and Victim axes
margin.table(penalty_tab, margin = c(1,2))
# penalty_tab was defined with the formula ~ Sentence + Victim + Aggravation.  Sentence and Victim, as the first two variables in the formula, will be retained, while Aggravation will get squashed.
# Aggravation is the 3rd variable in the formula, so here it will be retained while `Victim` and `Sentence` get squashed.
margin.table(penalty_tab, margin = c(3))
penalty_tab %>% collapse.table('Aggravation' = c(rep("Low", 3), c(rep("High", 3))))
# Table of counts
(sentence_victim_tab <- margin.table(penalty_tab, margin = c(1,2)))
# Table of proportions
prop.table(sentence_victim_tab) %>% round(2) # rounding all proportions to 2 decimal points to avoid visual clutter
# Table of column proportions
col_prop_tab <- prop.table(sentence_victim_tab, margin = 2)
col_prop_tab %>% round(2)
# Table of column percents
100 * col_prop_tab %>% round(3)
barplot(xtabs(~Sentence + Aggravation, penalty_case))
qplot(data = penalty_case, x = Aggravation, fill = Sentence, geom = "bar")
mosaic(~ Victim + Sentence, penalty_case)
flat_table <- xtabs(~ Sentence + Victim + Aggravation, penalty_case)%>%
prop.table(margin = c(2, 3)) %>% aperm(c(3,2,1)) %>% structable(direction = c("v","v","h"))
flat_table %>% round(2)
# You may want to make a new chunk wherein you can unpack this code a bit, and take a look at some of the intermediate objects. I find this particular code it somewhat obnoxiously convoluted, because prop.table() doesn't operate correctly on flat tables.  This requires the marginal proportions to be calculated from the regular table, *then* passed as such into structable()/ftable() to be flattened for display.
# If you can find a nicer way to make this flat table, I'd like to see it!
mosaic(flat_table)
(penalty_case)
library('Sleuth3')
df <- case1902
xtabs(~ Sentence + Victim + Aggravation, df)
df.names()
df.names
df.name
df
xtabs(~ Sentence + Victim + Aggravation, penalty_freq)
library('Sleuth3')
df <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
xtabs(~ Sentence + Victim + Aggravation, penalty_freq)
penalty_freq
penalty_freq
xtabs(~ Sentence + Victim + Aggravation, penalty_freq)
penalty_freq
xtabs(~  Victim + Aggravation, penalty_freq)
penalty_tab %>% aperm(c(2, 1, 3)) %>% structable(direction = c("v", "v", "h"))
penalty_tab %>% aperm(c(2, 1, 3)) %>% structable(direction = c("h", "v", "h"))
penalty_tab %>% aperm(c(2, 1, 3)) %>% structable(direction = c("v", "v", "h"))
penalty_tab %>% aperm(c(1, 2, 3)) %>% structable(direction = c("v", "v", "h"))
penalty_tab %>% aperm(c(1, 2, 3)) #%>% structable(direction = c("v", "v", "h"))
penalty_tab %>% aperm(c(1, 2, 3)) %>% structable(direction = c("v", "v", "h"))
df <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
#xtabs(~ Sentence + Victim + Aggravation, penalty_freq)
#penalty_freq
table <- penalty_tab %>% aperm(c(1, 2, 3)) %>% structable(direction = c("v", "v", "h"))
table
mosaic(table)
penalty <- case1902
penalty_freq <- gather(data = penalty, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
#xtabs(~ Sentence + Victim + Aggravation, penalty_freq)
#penalty_freq
table <- penalty_tab %>% aperm(c(1, 2, 3)) %>% structable(direction = c("v", "v", "h"))
penalty <- case1902
penalty_freq <- gather(data = penalty, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
#xtabs(~ Sentence + Victim + Aggravation, penalty_freq)
#penalty_freq
table <- penalty_freq %>% aperm(c(1, 2, 3)) %>% structable(direction = c("v", "v", "h"))
penalty <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
library('vcdExtra')
library('Sleuth3')
library("gnm")
library('tidyverse')
penalty <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
library('vcdExtra')
library('Sleuth3')
library("gnm")
library(tidyverse)
penalty <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty <- case1902
penalty_freq <- gather(data = df, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty <- case1902
penalty_freq <- gather(data = penalty, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty_tab <- xtabs(~ Sentence + Victim + Aggravation, penalty_freq)
#penalty_freq
table <- penalty_tab %>% aperm(c(1, 2, 3)) %>% structable(direction = c("v", "v", "h"))
table
penalty <- case1902
penalty_freq <- gather(data = penalty, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty_tab <- xtabs(~ Sentence + Victim + Aggravation, penalty_freq)
#penalty_freq
table <- penalty_tab %>% aperm(c(1, 2, 3)) %>% structable(direction = c("v", "v", "h"))
table
penalty <- case1902
penalty_freq <- gather(data = penalty, key = Sentence, value = Freq, c("Death", "NoDeath"), factor_key = TRUE)
penalty_tab <- xtabs(Freq~ Sentence + Victim + Aggravation, penalty_freq)
#penalty_freq
table <- penalty_tab %>% aperm(c(1, 2, 3)) %>% structable(direction = c("v", "v", "h"))
table
mosaic(table)
pbinom(14,20,.70)
1 - pbinom(14,20,.70)
1 - pbinom(14,20,.70, lower.tail = F)
pbinom(14,20,.70, lower.tail = F)
pbinom(14,20,0.50, lower.tail = F)
pbinom(14,20,0.70, lower.tail = F)
pbinom(14,20,0.50, lower.tail = F)
pbinom(14,20,0.50, lower.tail = F)
pbinom(14,20,0.70, lower.tail = F)
pbinom(14,20,0.50, lower.tail = F)
library(vcdExtra)
library(Sleuth3)
library(tidyverse)
penalty_indicators <- transmute(penalty_case,
Aggravation = Aggravation,
White = ifelse(Victim == "White", 1, 0),
Death = ifelse(Sentence == "Death", 1, 0))
library(vcdExtra)
library(Sleuth3)
library(tidyverse)
X <- data.frame(
V1 = c('Up', 'Up', 'Down', 'Down', 'Up', 'Up'),
V2 = c('Left', 'Left', 'Right', 'Right', 'Left', 'Right'),
V3 = c('B','B','A','B', 'A', 'B'))
X
X %>% table %>% as.data.frame # don't worry about this code for now
X_tab <- table(X)
(dims <- dim(X_tab))  # Dimensions of the 3-dimensional array that contains the frequencies of the factor-level combinations of the 3 variables in `X`.
# This is why there are 8 rows in the frequency table
prod(dims)
# 2-D slices of 3-D table
X_tab
penalty <- case1902
penalty
str(penalty)
penalty_freq <- gather(data = penalty, key = Sentence, value = Freq, factor_key = TRUE)
# Or more concisely: gather(penalty, Sentence, Freq, Death:NoDeath, factor_key = TRUE)
# factor_key specifies that the new variable Sentence should also be a factor, rather than just a character vector.
penalty[1,]
penalty_freq[c(1,13),]
# the other functions in that table are available in base R, but expand.dft() is from vcdExtra.
penalty_case <- expand.dft(penalty_freq)
head(penalty_case)
penalty_indicators <- transmute(penalty_case,
Aggravation = Aggravation,
White = ifelse(Victim == "White", 1, 0),
Death = ifelse(Sentence == "Death", 1, 0))
#install.packages("gnm")
library(vcdExtra)
library(Sleuth3)
library(tidyverse)
UCBAdmissions
xtabs(Admit~Dept+Gender,UCBAdmissions)
#UCBAdmissions
ftable(UCBAdmissions)
#UCBAdmissions
ftable(UCBAdmissions,row.vars="Dept",col.vars=c("Gender","Admit"))
#UCBAdmissions
aperm(UCBAdmissions,perm=c(6,2,2))
#UCBAdmissions
aperm(UCBAdmissions,perm=c(3,2,1))
#UCBAdmissions
aperm(UCBAdmissions,perm=c(3,1,2))
#UCBAdmissions
mosaic(UCBAdmissions,convars="Admit")
to.csv(HW1data)
to_csv(HW1data)
write.csv(HW1data,"HW1Data.csv")
HW1data <- df
HW1data['NumBoys'] <- round(HW1data['PctBoys'] * HW1data['Number'] / 100,0)
HW1data <- df
HW1data['NumBoys'] <- round(HW1data['PctBoys'] * HW1data['Number'] / 100,0)
pbinom(14,20,0.50, lower.tail = F)
library('Sleuth3')
df <- ex2117
df
HW1data <- df
HW1data['NumBoys'] <- round(HW1data['PctBoys'] * HW1data['Number'] / 100,0)
write.csv(HW1data,"HW1Data.csv")
as.data.frame(table(X))
as.data.frame(table(df))
as.data.frame(table(hw1data))
as.data.frame(table(HW1data))
head(as.data.frame(table(HW1data)))
